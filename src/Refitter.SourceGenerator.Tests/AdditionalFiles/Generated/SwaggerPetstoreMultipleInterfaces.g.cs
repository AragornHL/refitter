// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

using Refitter.Tests.AdditionalFiles.SingeInterface;

namespace Refitter.Tests.AdditionalFiles.ByEndpoint
{
    /// <summary>
    /// Update an existing pet
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IUpdatePetEndpoint
    {
        /// <summary>
        /// Update an existing pet by Id
        /// </summary>
        [Put("/pet")]
        Task<Pet> Execute([Body] Pet body);
    }

    /// <summary>
    /// Add a new pet to the store
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IAddPetEndpoint
    {
        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        [Post("/pet")]
        Task<Pet> Execute([Body] Pet body);
    }

    /// <summary>
    /// Finds Pets by status
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IFindPetsByStatusEndpoint
    {
        /// <summary>
        /// Multiple status values can be provided with comma separated strings
        /// </summary>
        [Get("/pet/findByStatus")]
        Task<ICollection<Pet>> Execute([Query] Status? status);
    }

    /// <summary>
    /// Finds Pets by tags
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IFindPetsByTagsEndpoint
    {
        /// <summary>
        /// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
        /// </summary>
        [Get("/pet/findByTags")]
        Task<ICollection<Pet>> Execute([Query(CollectionFormat.Multi)] IEnumerable<string> tags);
    }

    /// <summary>
    /// Find pet by ID
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IGetPetByIdEndpoint
    {
        /// <summary>
        /// Returns a single pet
        /// </summary>
        [Get("/pet/{petId}")]
        Task<Pet> Execute(long petId);
    }

    /// <summary>
    /// Updates a pet in the store with form data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IUpdatePetWithFormEndpoint
    {
        [Post("/pet/{petId}")]
        Task Execute(long petId, [Query] string name, [Query] string status);
    }

    /// <summary>
    /// Deletes a pet
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IDeletePetEndpoint
    {
        [Delete("/pet/{petId}")]
        Task Execute(long petId, [Header("api_key")] string api_key);
    }

    /// <summary>
    /// uploads an image
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IUploadFileEndpoint
    {
        [Post("/pet/{petId}/uploadImage")]
        Task<ApiResponse> Execute(long petId, [Query] string additionalMetadata, StreamPart body);
    }

    /// <summary>
    /// Returns pet inventories by status
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IGetInventoryEndpoint
    {
        /// <summary>
        /// Returns a map of status codes to quantities
        /// </summary>
        [Get("/store/inventory")]
        Task<IDictionary<string, int>> Execute();
    }

    /// <summary>
    /// Place an order for a pet
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IPlaceOrderEndpoint
    {
        /// <summary>
        /// Place a new order in the store
        /// </summary>
        [Post("/store/order")]
        Task<Order> Execute([Body] Order body);
    }

    /// <summary>
    /// Find purchase order by ID
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IGetOrderByIdEndpoint
    {
        /// <summary>
        /// For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
        /// </summary>
        [Get("/store/order/{orderId}")]
        Task<Order> Execute(long orderId);
    }

    /// <summary>
    /// Delete purchase order by ID
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IDeleteOrderEndpoint
    {
        /// <summary>
        /// For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
        /// </summary>
        [Delete("/store/order/{orderId}")]
        Task Execute(long orderId);
    }

    /// <summary>
    /// Create user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface ICreateUserEndpoint
    {
        /// <summary>
        /// This can only be done by the logged in user.
        /// </summary>
        [Post("/user")]
        Task Execute([Body] User body);
    }

    /// <summary>
    /// Creates list of users with given input array
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface ICreateUsersWithListInputEndpoint
    {
        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        [Post("/user/createWithList")]
        Task<User> Execute([Body] IEnumerable<User> body);
    }

    /// <summary>
    /// Logs user into the system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface ILoginUserEndpoint
    {
        [Get("/user/login")]
        Task<string> Execute([Query] string username, [Query] string password);
    }

    /// <summary>
    /// Logs out current logged in user session
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface ILogoutUserEndpoint
    {
        [Get("/user/logout")]
        Task Execute();
    }

    /// <summary>
    /// Get user by user name
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IGetUserByNameEndpoint
    {
        [Get("/user/{username}")]
        Task<User> Execute(string username);
    }

    /// <summary>
    /// Update user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IUpdateUserEndpoint
    {
        /// <summary>
        /// This can only be done by the logged in user.
        /// </summary>
        [Put("/user/{username}")]
        Task Execute(string username, [Body] User body);
    }

    /// <summary>
    /// Delete user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IDeleteUserEndpoint
    {
        /// <summary>
        /// This can only be done by the logged in user.
        /// </summary>
        [Delete("/user/{username}")]
        Task Execute(string username);
    }


}





#nullable enable
namespace Refitter.Tests.AdditionalFiles.ByEndpoint
{
    using System;
    using Microsoft.Extensions.DependencyInjection;

    public static partial class IServiceCollectionExtensions
    {
        public static IServiceCollection ConfigureRefitClients(this IServiceCollection services, Uri baseUrl, Action<IHttpClientBuilder>? builder = default)
        {
            var clientBuilderIUpdatePetEndpoint = services
                .AddRefitClient<IUpdatePetEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIUpdatePetEndpoint);

            var clientBuilderIAddPetEndpoint = services
                .AddRefitClient<IAddPetEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIAddPetEndpoint);

            var clientBuilderIFindPetsByStatusEndpoint = services
                .AddRefitClient<IFindPetsByStatusEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIFindPetsByStatusEndpoint);

            var clientBuilderIFindPetsByTagsEndpoint = services
                .AddRefitClient<IFindPetsByTagsEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIFindPetsByTagsEndpoint);

            var clientBuilderIGetPetByIdEndpoint = services
                .AddRefitClient<IGetPetByIdEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIGetPetByIdEndpoint);

            var clientBuilderIUpdatePetWithFormEndpoint = services
                .AddRefitClient<IUpdatePetWithFormEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIUpdatePetWithFormEndpoint);

            var clientBuilderIDeletePetEndpoint = services
                .AddRefitClient<IDeletePetEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIDeletePetEndpoint);

            var clientBuilderIUploadFileEndpoint = services
                .AddRefitClient<IUploadFileEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIUploadFileEndpoint);

            var clientBuilderIGetInventoryEndpoint = services
                .AddRefitClient<IGetInventoryEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIGetInventoryEndpoint);

            var clientBuilderIPlaceOrderEndpoint = services
                .AddRefitClient<IPlaceOrderEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIPlaceOrderEndpoint);

            var clientBuilderIGetOrderByIdEndpoint = services
                .AddRefitClient<IGetOrderByIdEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIGetOrderByIdEndpoint);

            var clientBuilderIDeleteOrderEndpoint = services
                .AddRefitClient<IDeleteOrderEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIDeleteOrderEndpoint);

            var clientBuilderICreateUserEndpoint = services
                .AddRefitClient<ICreateUserEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderICreateUserEndpoint);

            var clientBuilderICreateUsersWithListInputEndpoint = services
                .AddRefitClient<ICreateUsersWithListInputEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderICreateUsersWithListInputEndpoint);

            var clientBuilderILoginUserEndpoint = services
                .AddRefitClient<ILoginUserEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderILoginUserEndpoint);

            var clientBuilderILogoutUserEndpoint = services
                .AddRefitClient<ILogoutUserEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderILogoutUserEndpoint);

            var clientBuilderIGetUserByNameEndpoint = services
                .AddRefitClient<IGetUserByNameEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIGetUserByNameEndpoint);

            var clientBuilderIUpdateUserEndpoint = services
                .AddRefitClient<IUpdateUserEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIUpdateUserEndpoint);

            var clientBuilderIDeleteUserEndpoint = services
                .AddRefitClient<IDeleteUserEndpoint>()
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<EmptyMessageHandler>()
                .AddHttpMessageHandler<AnotherEmptyMessageHandler>();
            builder?.Invoke(clientBuilderIDeleteUserEndpoint);

            return services;
        }
    }
}