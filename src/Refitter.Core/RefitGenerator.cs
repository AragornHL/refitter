using System.Text;
using System.Threading.Tasks;
using NSwag;

namespace Refitter.Core
{
    public class RefitGenerator
    {
        private readonly RefitGeneratorSettings settings;
        private readonly OpenApiDocument document;
        private readonly CSharpClientGeneratorFactory factory;

        private RefitGenerator(RefitGeneratorSettings settings, OpenApiDocument document)
        {
            this.settings = settings;
            this.document = document;
            factory = new CSharpClientGeneratorFactory(settings, document);
        }

        public static async Task<RefitGenerator> CreateAsync(RefitGeneratorSettings settings) =>
            new(
                settings,
                await (settings.OpenApiPath.EndsWith("yaml") || settings.OpenApiPath.EndsWith("yml")
                    ? OpenApiYamlDocument.FromFileAsync(settings.OpenApiPath)
                    : OpenApiDocument.FromFileAsync(settings.OpenApiPath)));

        public string Generate()
        {
            var generator = factory.Create();
            var contracts = generator.GenerateFile();
            
            var interfaceGenerator = new RefitInterfaceGenerator(settings, document, generator);
            var client = GenerateClient(interfaceGenerator);

            return new StringBuilder()
                .AppendLine(client)
                .AppendLine()
                .AppendLine(settings.GenerateContracts ? contracts : string.Empty)
                .ToString();
        }

        private string GenerateClient(RefitInterfaceGenerator interfaceGenerator)
        {
            var code = new StringBuilder();
            GenerateAutoGeneratedHeader(code);
            code.AppendLine(RefitInterfaceImports.GenerateNamespaceImports())
                .AppendLine();

            code.AppendLine("namespace " + settings.Namespace)
                .AppendLine("{")
                .AppendLine(interfaceGenerator.GenerateRefitInterface())
                .AppendLine("}");

            return code.ToString();
        }

        private void GenerateAutoGeneratedHeader(StringBuilder code)
        {
            if (!settings.AddAutoGeneratedHeader)
                return;
            
            code.AppendLine("// <auto-generated>")
                .AppendLine("//     This code was generated by Refitter.")
                .AppendLine("// </auto-generated>")
                .AppendLine();
        }
    }
}