// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace Bot.paths.MatchPathFiltered
{
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.0.0.0")]
    public partial interface IBotOpenAPI
    {

    }
}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace Bot.paths.MatchPathFiltered
{
    using System = global::System;

    

    /// <summary>
    /// 公告对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Announces
    {

        [JsonPropertyName("guild_id")]
        public string Guild_id { get; set; }

        [JsonPropertyName("channel_id")]
        public string Channel_id { get; set; }

        [JsonPropertyName("message_id")]
        public string Message_id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 接口权限对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class APIPermission
    {
        /// <summary>
        /// API 接口名，例如 /guilds/{guild_id}/members/{user_id}
        /// </summary>

        [JsonPropertyName("path")]
        public string Path { get; set; }

        /// <summary>
        /// 请求方法，例如 GET
        /// </summary>

        [JsonPropertyName("method")]
        public string Method { get; set; }

        /// <summary>
        /// API 接口名称，例如 获取频道信
        /// </summary>

        [JsonPropertyName("desc")]
        public string Desc { get; set; }

        /// <summary>
        /// 授权状态，auth_stats 为 1 时已授权
        /// </summary>

        [JsonPropertyName("auth_status")]
        public int Auth_status { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 接口权限需求对象，用于往目标频道的子频道发送申请接口权限消息
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class APIPermissionDemand
    {

        [JsonPropertyName("guild_id")]
        public string Guild_id { get; set; }

        [JsonPropertyName("channel_id")]
        public string Channel_id { get; set; }

        [JsonPropertyName("api_identify")]
        public APIPermissionDemandIdentify Api_identify { get; set; }

        /// <summary>
        /// 接口权限链接中的接口权限描述信息
        /// </summary>

        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// 接口权限链接中的机器人可使用功能的描述信息
        /// </summary>

        [JsonPropertyName("desc")]
        public string Desc { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 接口权限需求标识对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class APIPermissionDemandIdentify
    {
        /// <summary>
        /// API 接口名，例如 /guilds/{guild_id}/members/{user_id}
        /// </summary>

        [JsonPropertyName("path")]
        public string Path { get; set; }

        /// <summary>
        /// 请求方法，例如 GET
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 语音对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AudioControl
    {
        /// <summary>
        /// 音频数据的url status为0时传
        /// </summary>

        [JsonPropertyName("audio_url")]
        public string Audio_url { get; set; }

        /// <summary>
        /// 状态文本（比如：简单爱-周杰伦），可选，status为0时传，其他操作不传
        /// </summary>

        [JsonPropertyName("text")]
        public string Text { get; set; }

        [JsonPropertyName("status")]
        public int Status { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 子频道对象,子频道对象中所涉及的 ID 类数据，都仅在机器人场景流通，与真实的 ID 无关。请不要理解为真实的 ID
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Channel
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("guild_id")]
        public string Guild_id { get; set; }

        /// <summary>
        /// 子频道名称
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("type")]
        public ChannelType Type { get; set; }

        [JsonPropertyName("sub_type")]
        public ChannelSubType Sub_type { get; set; }

        /// <summary>
        /// 排序值
        /// </summary>

        [JsonPropertyName("position")]
        public int Position { get; set; }

        /// <summary>
        /// 所属分组 id，仅对子频道有效，对 子频道分组（ChannelType=4） 无效
        /// </summary>

        [JsonPropertyName("parent_id")]
        public string Parent_id { get; set; }

        [JsonPropertyName("owner_id")]
        public string Owner_id { get; set; }

        [JsonPropertyName("private_type")]
        public PrivateType Private_type { get; set; }

        [JsonPropertyName("speak_permission")]
        public SpeakPermission Speak_permission { get; set; }

        [JsonPropertyName("application_id")]
        public string Application_id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 创建子频道请求对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelCreate
    {
        /// <summary>
        /// 子频道名称
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [JsonPropertyName("type")]
        public ChannelType Type { get; set; }

        [JsonPropertyName("sub_type")]
        public ChannelSubType Sub_type { get; set; }

        /// <summary>
        /// 排序值
        /// </summary>

        [JsonPropertyName("position")]
        public int Position { get; set; }

        [JsonPropertyName("parent_id")]
        public string Parent_id { get; set; }

        [JsonPropertyName("private_type")]
        public PrivateType Private_type { get; set; }

        /// <summary>
        /// 子频道私密类型成员 ID
        /// </summary>

        [JsonPropertyName("private_user_ids")]
        public ICollection<string> Private_user_ids { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 子频道权限对象, 权限是QQ频道管理频道成员的一种方式，管理员可以对不同的人、不同的子频道设置特定的权限。
    /// <br/>  * 用户的权限包括个人权限和身份组权限两部分，最终生效是取两种权限的并集。
    /// <br/>  * 权限使用位图表示，传递时序列化为十进制数值字符串。如权限值为0x6FFF，会被序列化为十进制'28671'
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelPermissions
    {

        [JsonPropertyName("channel_id")]
        public string Channel_id { get; set; }

        [JsonPropertyName("user_id")]
        public string User_id { get; set; }

        [JsonPropertyName("role_id")]
        public string Role_id { get; set; }

        [JsonPropertyName("permissions")]
        public string Permissions { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 子频道子类型:
    /// <br/>  * `0` - 闲聊
    /// <br/>  * `1` - 公告
    /// <br/>  * `2` - 攻略
    /// <br/>  * `3` - 开黑
    /// <br/>  | 目前只有文字子频道具有 ChannelSubType 二级分类，同时二级分类也可能会不断增加，开发者也需要注意对未知 ID 的处理
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChannelSubType
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>
    /// 子频道类型:
    /// <br/>  * `0` - 文字子频道
    /// <br/>  * `1` - 保留，不可用
    /// <br/>  * `2` - 语音子频道
    /// <br/>  * `3` - 保留，不可用
    /// <br/>  * `4` - 子频道分组
    /// <br/>  * `10005` - 直播子频道
    /// <br/>  * `10006` - 应用子频道
    /// <br/>  * `10007` - 论坛子频道
    /// <br/>  | 注：由于QQ频道还在持续的迭代中，经常会有新的子频道类型增加，文档更新不一定及时，开发者识别 ChannelType 时，请注意相关的未知 ID 的处理。
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChannelType
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _10005 = 10005,

        _10006 = 10006,

        _10007 = 10007,

    }

    /// <summary>
    /// 修子频道请求对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelUpdate
    {
        /// <summary>
        /// 子频道名称
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("type")]
        public ChannelType Type { get; set; }

        [JsonPropertyName("sub_type")]
        public ChannelSubType Sub_type { get; set; }

        /// <summary>
        /// 排序值
        /// </summary>

        [JsonPropertyName("position")]
        public int Position { get; set; }

        [JsonPropertyName("parent_id")]
        public string Parent_id { get; set; }

        [JsonPropertyName("private_type")]
        public PrivateType Private_type { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 私信会话对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DMS
    {
        /// <summary>
        /// 私信会话关联的频道ID
        /// </summary>

        [JsonPropertyName("guild_id")]
        public string Guild_id { get; set; }

        /// <summary>
        /// 私信会话关联的子频道ID
        /// </summary>

        [JsonPropertyName("channel_id")]
        public string Channel_id { get; set; }

        /// <summary>
        /// 创建私信会话时间戳
        /// </summary>

        [JsonPropertyName("create_time")]
        public string Create_time { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 频道对象,频道对象中所涉及的 ID 类数据，都仅在机器人场景流通，与真实的 ID 无关。
    /// <br/>请不要理解为真实的 ID
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Guild
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// 频道名称
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// 频道头像地址
        /// </summary>

        [JsonPropertyName("icon")]
        public string Icon { get; set; }

        [JsonPropertyName("owner_id")]
        public string Owner_id { get; set; }

        /// <summary>
        /// 当前人是否是创建人
        /// </summary>

        [JsonPropertyName("owner")]
        public bool Owner { get; set; }

        /// <summary>
        /// 成员数
        /// </summary>

        [JsonPropertyName("member_count")]
        public int Member_count { get; set; }

        /// <summary>
        /// 最大成员数
        /// </summary>

        [JsonPropertyName("max_members")]
        public int Max_members { get; set; }

        /// <summary>
        /// 描述
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// 加入时间
        /// </summary>

        [JsonPropertyName("joined_at")]
        public string Joined_at { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 频道身份组对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuildRole
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// 名称
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// ARGB 的 HEX 十六进制颜色值转换后的十进制数值（例：4294927682）
        /// </summary>

        [JsonPropertyName("color")]
        public double Color { get; set; }

        /// <summary>
        /// 是否在成员列表中单独展示, 0-否, 1-是
        /// </summary>

        [JsonPropertyName("hoist")]
        public double Hoist { get; set; }

        /// <summary>
        /// 人数
        /// </summary>

        [JsonPropertyName("number")]
        public double Number { get; set; }

        /// <summary>
        /// 成员上限
        /// </summary>

        [JsonPropertyName("member_limit")]
        public double Member_limit { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 成员对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Member
    {

        [JsonPropertyName("user")]
        public User User { get; set; }

        /// <summary>
        /// 用户的昵称
        /// </summary>

        [JsonPropertyName("nick")]
        public string Nick { get; set; }

        /// <summary>
        /// 用户在频道内的身份组ID
        /// </summary>

        [JsonPropertyName("roles")]
        public ICollection<string> Roles { get; set; }

        /// <summary>
        /// 用户加入频道的时间, ISO8601格式
        /// </summary>

        [JsonPropertyName("joined_at")]
        public System.DateTimeOffset Joined_at { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 消息对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Message
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("channel_id")]
        public string Channel_id { get; set; }

        [JsonPropertyName("guild_id")]
        public string Guild_id { get; set; }

        /// <summary>
        /// 消息内容
        /// </summary>

        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// 消息创建时间,ISO8601 timestamp
        /// </summary>

        [JsonPropertyName("timestamp")]
        public System.DateTimeOffset Timestamp { get; set; }

        /// <summary>
        /// 消息编辑时间,ISO8601 timestamp
        /// </summary>

        [JsonPropertyName("edited_timestamp")]
        public System.DateTimeOffset Edited_timestamp { get; set; }

        /// <summary>
        /// 是否是@全员消息
        /// </summary>

        [JsonPropertyName("mention_everyone")]
        public bool Mention_everyone { get; set; }

        [JsonPropertyName("author")]
        public User Author { get; set; }

        /// <summary>
        /// 附件
        /// </summary>

        [JsonPropertyName("attachments")]
        public ICollection<MessageAttachment> Attachments { get; set; }

        /// <summary>
        /// embed
        /// </summary>

        [JsonPropertyName("embeds")]
        public ICollection<MessageEmbed> Embeds { get; set; }

        /// <summary>
        /// 消息中@的人
        /// </summary>

        [JsonPropertyName("mentions")]
        public ICollection<User> Mentions { get; set; }

        [JsonPropertyName("member")]
        public Member Member { get; set; }

        [JsonPropertyName("ark")]
        public MessageArk Ark { get; set; }

        /// <summary>
        /// 用于消息间的排序，seq 在同一子频道中按从先到后的顺序递增，不同的子频道之前消息无法排序
        /// <br/>
        /// </summary>

        [JsonPropertyName("seq")]
        public int Seq { get; set; }

        [JsonPropertyName("seq_in_channel")]
        public string Seq_in_channel { get; set; }

        [JsonPropertyName("message_reference")]
        public MessageReference Message_reference { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// ark消息
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageArk
    {
        /// <summary>
        /// ark模板id（需要先申请）
        /// </summary>

        [JsonPropertyName("template_id")]
        public int Template_id { get; set; }

        /// <summary>
        /// kv值列表
        /// </summary>

        [JsonPropertyName("kv")]
        public ICollection<MessageArkKv> Kv { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// ARK消息KV
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageArkKv
    {
        /// <summary>
        /// key
        /// </summary>

        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// value
        /// </summary>

        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// ark obj类型的列表
        /// </summary>

        [JsonPropertyName("obj")]
        public ICollection<MessageArkObj> Obj { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// MessageArkObj
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageArkObj
    {
        /// <summary>
        /// ark objkv列表
        /// </summary>

        [JsonPropertyName("obj_kv")]
        public ICollection<MessageArkObjKv> Obj_kv { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// MessageArkObjKv
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageArkObjKv
    {
        /// <summary>
        /// key
        /// </summary>

        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// value
        /// </summary>

        [JsonPropertyName("value")]
        public string Value { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 消息附件
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageAttachment
    {
        /// <summary>
        /// 下载地址
        /// </summary>

        [JsonPropertyName("url")]
        public string Url { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// embed消息
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageEmbed
    {
        /// <summary>
        /// 标题
        /// </summary>

        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// 消息弹窗内容
        /// </summary>

        [JsonPropertyName("prompt")]
        public string Prompt { get; set; }

        [JsonPropertyName("thumbnail")]
        public MessageEmbedThumbnail Thumbnail { get; set; }

        /// <summary>
        /// embed 字段数据
        /// </summary>

        [JsonPropertyName("fields")]
        public ICollection<MessageEmbedField> Fields { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// embed字段
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageEmbedField
    {
        /// <summary>
        /// 字段
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 消息封面
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageEmbedThumbnail
    {
        /// <summary>
        /// 图片地址
        /// </summary>

        [JsonPropertyName("url")]
        public string Url { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 引用消息对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageReference
    {

        [JsonPropertyName("message_id")]
        public string Message_id { get; set; }

        /// <summary>
        /// 是否忽略获取引用消息详情错误，默认否，仅在发送引用消息的时候使用
        /// </summary>

        [JsonPropertyName("ignore_get_message_error")]
        public bool Ignore_get_message_error { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 用户发送消息的数据对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageSend
    {
        /// <summary>
        /// 消息内容，文本内容，支持内嵌格式
        /// </summary>

        [JsonPropertyName("content")]
        public string Content { get; set; }

        [JsonPropertyName("embed")]
        public MessageEmbed Embed { get; set; }

        [JsonPropertyName("ark")]
        public MessageArk Ark { get; set; }

        [JsonPropertyName("message_reference")]
        public MessageReference Message_reference { get; set; }

        /// <summary>
        /// 图片url地址，平台会转存该图片，用于下发图片消息
        /// </summary>

        [JsonPropertyName("image")]
        public string Image { get; set; }

        /// <summary>
        /// 要回复的消息id(Message.id), 在 AT_CREATE_MESSAGE 事件中获取，携带之后此条回复视为被动消息
        /// </summary>

        [JsonPropertyName("msg_id")]
        public string Msg_id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 精华消息对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PinsMessage
    {

        [JsonPropertyName("guild_id")]
        public string Guild_id { get; set; }

        [JsonPropertyName("channel_id")]
        public string Channel_id { get; set; }

        [JsonPropertyName("message_ids")]
        public ICollection<string> Message_ids { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 子频道私密类型:
    /// <br/>  * `0` - 公开频道
    /// <br/>  * `1` - 群主管理员可见
    /// <br/>  * `2` - 群主管理员+指定成员，可使用 修改子频道权限接口 指定成员
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrivateType
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>
    /// 频道身份组对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Role
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// 名称
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// ARGB的HEX十六进制颜色值转换后的十进制数值
        /// </summary>

        [JsonPropertyName("color")]
        public int Color { get; set; }

        /// <summary>
        /// 是否在成员列表中单独展示: 0-否, 1-是
        /// </summary>

        [JsonPropertyName("hoist")]
        public int Hoist { get; set; }

        /// <summary>
        /// 人数
        /// </summary>

        [JsonPropertyName("number")]
        public int Number { get; set; }

        /// <summary>
        /// 成员上限
        /// </summary>

        [JsonPropertyName("member_limit")]
        public int Member_limit { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 日程对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schedule
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// 日程名称
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// 日程描述
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// 日程开始时间戳(ms)
        /// </summary>

        [JsonPropertyName("start_timestamp")]
        public string Start_timestamp { get; set; }

        /// <summary>
        /// 日程结束时间戳(ms)
        /// </summary>

        [JsonPropertyName("end_timestamp")]
        public string End_timestamp { get; set; }

        [JsonPropertyName("creator")]
        public Member Creator { get; set; }

        /// <summary>
        /// 日程开始时跳转到的子频道 id
        /// </summary>

        [JsonPropertyName("jump_channel_id")]
        public string Jump_channel_id { get; set; }

        [JsonPropertyName("remind_type")]
        public string Remind_type { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 日程创建对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduleCreate
    {
        /// <summary>
        /// 日程名称
        /// </summary>

        [JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// 日程描述
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// 日程开始时间戳(ms)
        /// </summary>

        [JsonPropertyName("start_timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Start_timestamp { get; set; }

        /// <summary>
        /// 日程结束时间戳(ms)
        /// </summary>

        [JsonPropertyName("end_timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string End_timestamp { get; set; }

        [JsonPropertyName("creator")]
        public Member Creator { get; set; }

        /// <summary>
        /// 日程开始时跳转到的子频道 id
        /// </summary>

        [JsonPropertyName("jump_channel_id")]
        public string Jump_channel_id { get; set; }

        /// <summary>
        /// 日程提醒类型
        /// </summary>

        [JsonPropertyName("remind_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Remind_type { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 日程更新对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduleUpdate
    {
        /// <summary>
        /// 日程名称
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// 日程描述
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// 日程开始时间戳(ms)
        /// </summary>

        [JsonPropertyName("start_timestamp")]
        public string Start_timestamp { get; set; }

        /// <summary>
        /// 日程结束时间戳(ms)
        /// </summary>

        [JsonPropertyName("end_timestamp")]
        public string End_timestamp { get; set; }

        [JsonPropertyName("creator")]
        public Member Creator { get; set; }

        /// <summary>
        /// 日程开始时跳转到的子频道 id
        /// </summary>

        [JsonPropertyName("jump_channel_id")]
        public string Jump_channel_id { get; set; }

        /// <summary>
        /// 日程提醒类型
        /// </summary>

        [JsonPropertyName("remind_type")]
        public string Remind_type { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 创建 Session 限制信息
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SessionStartLimit
    {
        /// <summary>
        /// 每 24 小时可创建 Session 数
        /// </summary>

        [JsonPropertyName("total")]
        public int Total { get; set; }

        /// <summary>
        /// 目前还可以创建的 Session 数
        /// </summary>

        [JsonPropertyName("remaining")]
        public int Remaining { get; set; }

        /// <summary>
        /// 重置计数的剩余时间(ms)
        /// </summary>

        [JsonPropertyName("reset_after")]
        public int Reset_after { get; set; }

        /// <summary>
        /// 每 5s 可以创建的 Session 数
        /// </summary>

        [JsonPropertyName("max_concurrency")]
        public int Max_concurrency { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 子频道发言权限:
    /// <br/>  * `0` - 无效类型
    /// <br/>  * `1` - 所有人
    /// <br/>  * `2` - 群主管理员+指定成员，可使用 修改子频道权限接口 指定成员
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SpeakPermission
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    /// <summary>
    /// 用户对象中所涉及的 ID 类数据，都仅在机器人场景流通，与真实的 ID 无关。
    /// <br/>请不要理解为真实的 ID
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// 用户名
        /// </summary>

        [JsonPropertyName("username")]
        public string Username { get; set; }

        /// <summary>
        /// 用户头像地址
        /// </summary>

        [JsonPropertyName("avatar")]
        public string Avatar { get; set; }

        /// <summary>
        /// 是否是机器人
        /// </summary>

        [JsonPropertyName("bot")]
        public bool Bot { get; set; }

        /// <summary>
        /// 特殊关联应用的 openid，需要特殊申请并配置后才会返回。如需申请，请联系平台运营人员
        /// <br/>
        /// </summary>

        [JsonPropertyName("union_openid")]
        public string Union_openid { get; set; }

        /// <summary>
        /// 机器人关联的互联应用的用户信息，与union_openid关联的应用是同一个。
        /// <br/>如需申请，请联系平台运营人员
        /// <br/>
        /// </summary>

        [JsonPropertyName("union_user_account")]
        public string Union_user_account { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625